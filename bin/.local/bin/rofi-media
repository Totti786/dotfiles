#!/usr/bin/env bash

# Define cache and file paths
data_dir="$HOME/.local/share/rofi-media"
shortcuts="$HOME/.local/share/applications/media"
watchlater_dir="$data_dir/watch_later"
media_history="$data_dir/media_history.txt"
config_file="$data_dir/conf.sh"
fallback_poster="$data_dir/cover.jpg"

# Create necessary directories if they don't exist
mkdir -p "$shortcuts"
mkdir -p "$watchlater_dir"

configuration(){
	[[ -f "$config_file" ]] && . "${config_file}" || echo  "# rofi-media config file" >> "${config_file}"
	
	[[ -z "$anime_directory" ]] && anime_directory="$HOME/Videos/Anime"
	[[ -z "$movies_directory" ]] && movies_directory="$HOME/Videos/Movies"
	[[ -z "$shows_directory" ]] && shows_directory="$HOME/Videos/Shows"
	[[ -z "$player" ]] && player="mpv"
	[[ -z "$speed" ]] || [[ "$player" == "syncplay" ]] && speed="1.0"
}

if [[ ! -f "$fallback_poster" ]]; then
	eval $(xrdb -query | awk '/color0/{print "color0="$NF} /color7/{print "color7="$NF}')
	magick -size 300x445 xc:"$color0" "$fallback_poster"
	magick "$fallback_poster" -gravity center -fill "$color7" \
	-font /usr/share/fonts/TTF/JetBrainsMonoNerdFont-Regular.ttf \
	-pointsize 90 -annotate 0 "ó°¿Ž" "$fallback_poster"
fi

get_poster(){
	if [[ -z "$1" ]]; then
		echo "Usage: $0 <title> <year (optional)> <type>"
		exit 1
	fi

	type="$1"
	title="$2"
	year="$3"

	cover_dir="$data_dir/$type"
	mkdir -p "$cover_dir"

	# Prepare the title argument for the API request
	encoded_title=$(echo "$title" | tr ' ' '+')

	if [[ "$type" == "anime" ]]; then
		# Fetch anime data from Jikan API
		response=$(curl -s "https://api.jikan.moe/v4/anime?q=$encoded_title&season=$year")
		poster_url=$(echo "$response" | jq -r '.data[0].images.jpg.large_image_url')
	else
		API_KEY="497fd34e"
		# Fetch movie/show data from OMDB API
		response=$(curl -s "http://www.omdbapi.com/?t=$encoded_title&year=$year&apikey=$API_KEY")
		poster_url=$(echo "$response" | jq -r '.Poster')
	fi

	# Check for errors
	error_message=$(echo "$response" | jq -r '.Error')
	if [[ "$error_message" != "null" ]]; then
		#echo "Error: $error_message"
		poster_url="N/A"
	fi

	if [[ "$poster_url" == "N/A" ]]; then
		#echo "No poster available for '$title', using fallback image."
		cp "$fallback_poster" "$cover_dir/$title.jpg"
	else
		wget -q "$poster_url" -O "$cover_dir/$title.jpg"
		#echo "Poster downloaded as '$cover_dir/$title.jpg'"
	fi
}

process_media(){
	media_type="$1"
	case "$media_type" in
		"movies")
			media_directory="$movies_directory"
			# Find media files directly
			readarray -t lines < <(find -L "$media_directory" -type f \( -iname "*.mp4" -o -iname "*.mkv" \) | sort)
			;;
		"shows" | "anime")
		[[ "$player" == "syncplay" ]] && exec_command="$0 -s --episode" || exec_command="$0 --episode"
			media_directory="$([ "$media_type" = "shows" ] && echo "$shows_directory" || echo "$anime_directory")"
			# Find directories containing media files
			readarray -t lines < <(find "$media_directory" -mindepth 1 -maxdepth 1 \( -type d -o -type l \) -print0 | while IFS= read -r -d '' dir; do
				if find -L "$dir" -type f \( -iname "*.mp4" -o -iname "*.mkv" \) -print -quit | grep -q .; then echo "$dir" ;fi done | sort)
			;;
		*)
			echo "Invalid media type specified."
			exit 1
			;;
	esac

	saved_lines="$data_dir/$media_type/$media_type.txt"

	# Define the titles array
	IFS=$'\n' posters=($(find "$data_dir"/"$media_type" -type f -iname "*.jpg" 2> /dev/null))

	if [[ ${#lines[@]} -eq 0 ]]; then
		notify-send -r 12 -u low -a rofi-media "rofi-media" "No files were found in $media_directory"
		return
	elif [[ ${#lines[@]} -gt "$(cut -f2 "$saved_lines" 2> /dev/null | wc -l)" ]]; then
		notify-send -r 12 -u low -a rofi-media "rofi-media" "Updating List..."
	fi

	# Declare an associative array
	declare -A title_map

	# Read the file line-by-line
	if [[ -f "$saved_lines" ]]; then
		while IFS=$'\t' read -r path title; do
			# Check if the line contains both a path and a title
			if [[ -n "$path" && -n "$title" ]]; then
				title_map["$path"]="$title"
			fi
		done < "$saved_lines"
	fi

	for line in "${lines[@]}"; do
		if [[ -n "${title_map[$line]}" ]]; then
			title="${title_map[$line]}"
	    else
			# Extract the name of the file from the path
			local name="${line##*/}"
			# Remove the file extension from the name
			local name="${name%.*}"

			# Extract the year and remove everything after it
			if [[ "$name" =~ ([1][9][0-9]{2}|20[0-9]{2}) ]]; then
				# Get the year if present and strip the title of extra info
				year="${BASH_REMATCH[1]}"
				title=$(echo "$name" | sed -e "s/$year.*//" -e 's/^\[.*\] \(.*\) - .*/\1/' -e 's/\[[^]]*\]//g' -e 's/([^)]*)//g' -e 's/{[^}]*}//g' -e 's/[._()]/ /g' -e 's/[[:space:]]\+/ /g; s/^[ \t]*//; s/[ \t]*$//; s/ S[0-9][0-9]*.*//')
				# Check if title is empty or only contains the year
				# If title is empty or only contains spaces, set title to the year itself
				[[ -z "$title" || "$title" =~ ^[[:space:]]*$ ]] && title="$year"
			else
				# Remove trailing spaces
				title=$(echo "$name" | sed -e 's/^\[.*\] \(.*\) - .*/\1/' -e 's/\[[^]]*\]//g' -e 's/([^)]*)//g' -e 's/{[^}]*}//g' -e 's/[._()]/ /g' -e 's/[[:space:]]\+/ /g; s/^[ \t]*//; s/[ \t]*$//; s/ S[0-9][0-9]*.*//')
				year=""
			fi
			printf "%s\t%s\n" "$line" "$title" >> "$saved_lines" 2> /dev/null
		fi

		# Check if the poster file is missing and download it
		if ! [[ -f "$data_dir/$media_type/$title.jpg" ]]; then
			get_poster "$media_type" "$title" "$year" &
			# Wait for the request to be completed to not exceeded Jikan API rate limit
			[[ "$media_type" == "anime" ]] && wait
		fi

		# Set the clean version of the title in the player
		if [[ "$media_type" == "movies" ]]; then
			exec_command="mpv --speed=$speed --write-filename-in-watch-later-config --save-position-on-quit"
			exec_command+=" --title=\"$title\" \"$line\""
		fi

		# Create a list of used posters
		used_images+=("$data_dir/$media_type/$title")
		used_lines+=($(grep -F "${line}" "$saved_lines" | head -n1 ))

		menu_entry="$shortcuts/$title.desktop"

		if [[ ! -f "$menu_entry" ]]; then
			cat > "$menu_entry" <<- EOF
			[Desktop Entry]
			Name=$title
			Exec=$exec_command $media_type "$title"
			Icon=$data_dir/$media_type/$title.jpg
			Type=Application
			Categories=${media_type^}
			EOF
		fi
	done

	printf "%s\n" "${used_lines[@]}" > "$saved_lines"

	# Delete unused posters
	for cached_image in ${posters[@]} ; do
	    if [[ ! " ${used_images[@]} " =~ "${cached_image%.jpg}" ]]; then
			rm "$cached_image"
		fi
	done

	wait
	rofi -show drun -drun-categories "${media_type^}" -theme rofi-media
}

prompt_menu(){
	echo -e "$1" | rofi -dmenu -mesg "$2" -theme-str "#mainbox { children: [ message, listview ]; } #textbox { padding: 24px; }"
}

get_duration(){
	while [[ -z "$duration" ]]; do
		# If duration is still empty, wait for half a second and try again
		[[ -z "$duration" ]] && sleep 1

		# Check if mpv is running and get the duration
		duration="$([[ "$(pgrep mpv)" ]] && echo '{"command": ["get_property", "duration"]}' | socat - $ipc_socket 2> /dev/null | awk -F'"data":|,' '{print $2}')"
	done

	# Once duration is found, save it to the file
	printf "%.0f" "$duration" > "$watchlater_dir"/duration
}

play_media() {
	local file_path="$1"
	local start_position="$2"
	local playlist="$watchlater_dir/episode_list.m3u"
	ipc_socket="/tmp/mpvsocket"

	[[ -z "$start_position" ]] && start_position="0"

	get_duration &

	# Initial player_cmd array
	player_cmd=(--speed="$speed" --keep-open=always --watch-later-dir="$watchlater_dir" \
				--write-filename-in-watch-later-config --save-position-on-quit \
				--input-ipc-server="$ipc_socket" --start="$start_position")

	# Use `find` to get the subs directory, assuming it's a direct subdirectory
	subs_directory="$(find -L "${file_path%/*}" -maxdepth 1 -mindepth 1 -type d | grep -i 'subs' | head -n 1)"

	# Check if subs_directory is non-empty
	if [[ -n "$subs_directory" ]]; then
		file_name="${file_path##*/}"	# Get the base filename from file_path
		file_name="${file_name%.*}"		# Strip extension

		# Append the subtitle options to player_cmd
		player_cmd+=(--sub-auto=all --sub-file-paths="${subs_directory}/${file_name}")
	fi

	if [[ "$player" == "syncplay" ]]; then
		ls -v "${file_path%/*}" | grep -E '\.mp4$|\.mkv$' | awk -v start="${file_path##*/}" '$0 >= start' > "$playlist"
		syncplay --player-path "$(command -v mpv)" --load-playlist-from-file "$playlist" "$file_path" -- "${player_cmd[@]}" >/dev/null 2>&1
	elif [[ "$player" == "mpv" ]]; then
		find -L "${file_path%/*}" -maxdepth 1 -type f \( -iname "*.mp4" -o -iname "*.mkv" \) | sort | awk -v start="$file_path" '$0 >= start' > "$playlist"
		mpv "${player_cmd[@]}" "$playlist" >/dev/null 2>&1
	fi

	#[[ "$?" -ne 0 ]] && echo "Couldn't Open File!"; exit 1
}

save_history(){
	local name="${1##*/}"
	local name="${name%.*}"
	local title="$(grep -F "$name" "$saved_lines" | head -n1 | cut -f2 | uniq)"

	local duration="$(cat $watchlater_dir/duration 2> /dev/null)"

	file="$(grep -hB1 "start=" $watchlater_dir/* 2>/dev/null | grep -FA2 "$name")"

	if [[ -n "$file" ]]; then
		position="$(echo "$file" | awk -F= '/start/ {print int($2)}' | tail -n1)"
		file_path="$(echo "$file" | awk -F' start=' '/^# / {print substr($1, 3)}' | sort | tail -n1)"
	
		[[ -n "$duration" ]] && local progress=$(($position * 100 / $duration))
		
		if grep -qw "$title" "$media_history"; then
			sed -i "/$title/d" "$media_history"
		fi
	
		printf "%s\t%s\t%s\t%s\n" "$title" "$position" "$file_path" "$progress" >> "$media_history"
	else
		echo "History File Not Found!"
	fi
	rm "$watchlater_dir"/*
}

check_history(){
	name="${1##*/}"
	name="$(grep -F "$name" "$saved_lines" | head -n1 | cut -f2 | uniq)"

	position="$(grep -hw "$name" $media_history | awk -F'\t' '{print $2}')"
	file_path="$(grep -hw "$name" $media_history | awk -F'\t' '{print $3}')"
	progress="$(grep -hw "$name" $media_history | awk -F'\t' '{print $4}')"
	dir="${file_path%/*}"
	episode=$(echo "${file_path##*/}" | sed -n -e 's/.*[eE]\([0-9]\{2\}\).*/\1/p' -e 's/.*\b\([0-9]\{2\}\)\b.*/\1/p' | head -n1)
}

prompt(){
	local show="$1"
	check_history "$show"

  local episode_number="$episode"
  local selected_directory="$dir"

  get_next_episode
	
	if [[ -n "$next_episode_file" ]]; then
		if [[ "$progress" -ge 90 ]]; then
			options="$(prompt_menu "Next\nReplay\nSelect\nExit" "Select an option:")"
		else
			options="$(prompt_menu "Next\nResume\nReplay\nSelect\nExit" "Select an option:")"
		fi

		case "$options" in
		"Next")
			play_media "$selected_directory/$next_episode_file"
			save_history "$show"
			prompt "$show"
			;;
		"Resume")
			play_media "$file_path" "$position"
			save_history "$show"
			prompt "$show"
			;;
		"Replay")
			play_media "$file_path"
			save_history "$show"
			prompt "$show"
      ;;
		"Select")
			select_episode "$show"
			;;
		"Exit")
			exit 0
			;;
		esac
	else
		get_next_season
	fi
}

play_history(){
	media_type="$1"
	local title="$2"
	saved_lines="$data_dir/$media_type/$media_type.txt"
	local show="$(grep -E "$title$" "$saved_lines" | cut -f1)"
	number_of_seasons="$(echo -e "$show" | wc -l)"
	[[ "$media_type" == "anime" ]] && speed="1.0"

	check_history "$show"
  
  local episode_number="$episode"
  local selected_directory="$dir"
  
  get_next_episode(){
    # Check for the next episode in the current season
    next_episode_number=$(printf '%02d' $((10#$episode_number + 1)))
    next_episode_file=$(ls -v "$selected_directory" | grep -Ei "([sS][0-9]+[eE]$next_episode_number| - $next_episode_number - | - $next_episode_number[[:space:]]| - $next_episode_number[^a-zA-Z0-9]|[_\.x-]$next_episode_number[^a-zA-Z0-9])" | grep -E '\.mp4$|\.mkv$')
  }

	get_next_season(){
		# Check if there is another season available
		next_season_dir="$(echo "$season_dirs" | grep -FA1 "$selected_directory" | tail -n1)"
		[[ -n "$next_season_dir"  && "$next_season_dir" != "$selected_directory" ]] && binge_next_season="$(prompt_menu "Yes\nNo" "Next season available. Play next season?")"

		if [[ "$binge_next_season" == "Yes"  && "$next_season_dir" != "$selected_directory" ]]; then
			first_episode_file=$(ls -v "$next_season_dir" | grep -E '\.mp4$|\.mkv$' | head -n1)
			if [[ -n "$first_episode_file" ]]; then
				play_media "$next_season_dir/$first_episode_file"
				grep -Fq "$next_season_dir" "$saved_lines" && show="$next_season_dir"
				save_history "$show"
				prompt "$show"
			fi
		fi
	}

	# Check if there are multiple season directories, only if there are no video files in the directory
	if [[ "$number_of_seasons" -gt 1 && -z "$season_dirs" ]]; then
		IFS=$'\n' ; for line in $(echo -e "$show"); do
			# Find directories inside the current line
			subdirs=$(find -L "$line" -maxdepth 1 -mindepth 1 -type d)

			# Loop through each subdir to check if it contains video files
			if [[ -n "$subdirs" ]]; then 
				for subdir in "$subdirs"; do
					# Check if the subdir contains video files
					if find -L "$subdir" -maxdepth 1 -type f -iregex '.*\.\(mp4\|mkv\)' | grep -q .; then
						season_dirs+="${subdir}"$'\n'
					fi
				done
			fi

			# If no subdirectories were found with video files, check if the current directory has videos
			if [[ -z "$subdirs" ]] || [[ -n $(find -L "$line" -maxdepth 1 -type f -iregex '.*\.\(mp4\|mkv\)' | grep .) ]]; then
				season_dirs+="${line}"$'\n'
			fi
		done
	elif [[ -z "$(find -L "$show" -maxdepth 1 -type f -iregex '.*\.\(mp4\|mkv\)')" && -z "$season_dirs" ]]; then
		season_dirs="$(find -L "$show" -maxdepth 1 -mindepth 1 -type d | sort)"
	fi

	if [[ "$progress" -ge 90 ]]; then    
    get_next_episode
		if [[ -n "$next_episode_file" ]]; then
			file_path="$selected_directory/$next_episode_file"
			position=""
		else
			file_path=""
			get_next_season
			[[ "$binge_next_season" == "Yes" ]] && exit 0
		fi
	fi

	[[ -n "$file_path" ]] && history=$(prompt_menu "Yes\nNo" "Resume from where you left off?")

	if [[ "$history" == "Yes" ]]; then
		if [[ -n $(echo "$show" | grep -F "$dir") ]]; then
			show="$dir"
		else
			show="${dir%/*}"
		fi

		play_media "$file_path" "$position"
		save_history "$show"
		[[ -d "$show" ]] &&  prompt "$show"
		exit 0
	else
		if [[ -f "$show" ]]; then
			play_media "$show"
			save_history "$show"
		else
			select_episode
		fi
	fi
}

select_episode(){

	list_seasons() {
		season=$(prompt_menu "$(echo "$1" | sed -E '
    # Handle "S01P01" -> "Season 1: Part 1" (case-insensitive)
    s/.*[sS]0?([1-9][0-9]*)[pP]0?([1-9][0-9]*).*/Season \1: Part \2/; t;
    # Handle "Season 3 Part 1" -> "Season 3: Part 1"
    s/.*[sS]eason[[:space:]]+([0-9]+)[[:space:]]*-[[:space:]]*Part[[:space:]]+([0-9]+).*/Season \1: Part \2/; t;
    # Handle "Season 3 - Part 1" -> "Season 3: Part 1"
    s/.*[sS]eason[[:space:]]+([0-9]+)[[:space:]]*-[[:space:]]*Part[[:space:]]+([0-9]+).*/Season \1: Part \2/; t;
    # Handle "Episodes 001-148" -> "Episodes 001-148"
    s/.*Episodes[[:space:]]+([0-9]+)-([0-9]+).*/Episodes \1-\2/; t;
    # Handle "Movies" -> "Movies"
    s/.*Movies.*/Movies/; t;
    # Handle "S01" -> "Season 1" (case-insensitive)
    s/.*[sS]0?([1-9][0-9]*).*/Season \1/; t;
    # Handle "Season 3" -> "Season 3" (case-insensitive)
    s/.*[sS]eason[[:space:]]+([0-9]+).*/Season \1/; t;
    # Handle cases with extra information, just keep the name unchanged
    s!.*/!!')" "Select the season:")

	}

	list_episodes() {
		# Extract episode numbers and titles, and format the selection
		 episode_list="$(ls -vp "$1" | grep -v / | grep -E '\.mp4$|\.mkv$' | sed -E '
			# Handle [group] tag and metadata in square brackets - ignore group name and metadata
			s/\[.*\][[:space:]]+[^-]+[[:space:]]+-[[:space:]]+([0-9]+)[[:space:]]+\[.*\].*$/Episode \1/; t;
			# Handle standard episode formats with season and episode numbers, capturing titles after SXXEXX
			s/.*[sS][0-9]+[Ee]([0-9]+)[^A-Za-z0-9]*([^0-9]+\S[^0-9]+?)[. ]+[^.]+$/Episode \1: \2/; t;
			s/.*[sS][0-9]+[Ee]([0-9]+)[^A-Za-z0-9]*([^0-9]+\S[^0-9]+?)[. ]+.*$/Episode \1: \2/; t;
			s/.*[sS][0-9]+[Ee]([0-9]+).*$/Episode \1/; t;
			# Match complex titles after a number if present, or just extract the title after the last dash
			s/.* - ([0-9]+[^0-9a-zA-Z]?) - ([^0-9]+?)\..*$/Episode \1: \2/; t;
			s/.* - ([^0-9]+?) - ([^0-9]+?)\..*$/\2/; t;
			s/.* - ([0-9]+[^0-9a-zA-Z]?)\..*$/Episode \1/; t;
			s/.* - Episode ([0-9]+) - ([^0-9]+?)\..*$/Episode \1: \2/; t;
			s/.* - Episode ([0-9]+)\..*$/Episode \1/; t;
			s/.*[sS][0-9]+[Ee]([0-9]+)\..*$/Episode \1/; t;
			# Handle movies or files with "The Movie" in the title
			s/.*[[:space:]]+-[[:space:]]+The[[:space:]]+Movie[[:space:]]+-[[:space:]]+([^[]+)[[:space:]]+\[.*\].*$/\1/; t;
			# Handle cases where title is complex and episode number is not in the format
			s/.* - ([^-]+)\..*$/\1/; t;
			# Fallback for movies or files without episode or season numbers
			s/.* ([^\/]+)\..*$/\1/' | sed -E 's/\./ /g')"
	}

	if [[ -n "$season_dirs" ]]; then
	  list_seasons "$season_dirs"

		[[ -z "$season" ]] && exit 1

		season_number=$(echo "$season" | grep -oP '(?<=Season\s)\d+')
		part_number=$(echo "$season" | grep -oP '(?<=Part\s)\d+')

		if [[ -n "$part_number" ]]; then
	    # Handle part and season combinations like S01P01, S1P1, Season 1 - Part 1, etc.
	    season_pattern="([sS]0?$season_number[Pp]0?$part_number|[sS]$season_number[Pp]$part_number|Season[[:space:]]*$season_number[[:space:]]*[-]?[[:space:]]*Part[[:space:]]*$part_number)"
		else
	    # Handle regular season formats like S01, Season 1, etc.
	    season_pattern="([sS]0?$season_number|[sS]$season_number|Season[[:space:]]*$season_number|^0?$season_number$)"
		fi

		if [[ -n "$season_number" ]]; then
			if [[ "$number_of_seasons" -eq 1 ]]; then
				season_dir=$(ls -v "$show" | grep -E -i "$season_pattern" | head -n 1)
				selected_directory="$show/$season_dir"
				#echo 1
			else
				season_dir=$(echo "$season_dirs" | grep -E -i "$season_pattern" | head -n 1)
				selected_directory="$season_dir"
				if [[ -n $(echo "$show" | grep -F "$season_dir") ]]; then
					show="$season_dir"
				else
					show="${season_dir%/*}"
				fi
				#echo 2
			fi
		else
			if [[ "$number_of_seasons" -eq 1 ]]; then
				season_dir=$(ls -v "$show" | grep -Fi "$season" | head -n 1)
				selected_directory="$show/$season_dir"
				#echo 3
			else
				season_dir=$(echo "$season_dirs" | grep -Fi "$season" | head -n1)
				selected_directory="$season_dir"
				if [[ -n $(echo "$show" | grep -F "$season_dir") ]]; then
					show="$season_dir"
				else
					show="${season_dir%/*}"
				fi
				#echo 4
			fi
		fi

	else
		selected_directory="$show"
		#echo 5
	fi
	
	#echo "------------------------------------------------"
	#echo "$number_of_seasons"
	#echo "------------------------------------------------"
	#echo "$show"
	#echo "------------------------------------------------"
	#echo "$season"
	#echo "------------------------------------------------"
	#echo "$season_dir"
	#echo "------------------------------------------------"
	#echo "$season_dirs"
	#echo "------------------------------------------------"
	#echo "$selected_directory"
	#echo "------------------------------------------------"
	
	list_episodes "$selected_directory"

	if [[ $(echo "$episode_list" | wc -l ) -eq 1 ]]; then
		selection="$episode_list"
	else
		selection=$(echo "$episode_list" | rofi -sort -dmenu -mesg "Select the episode:")
	fi

	# Map the selected "Episode X: Title" or title without episode number back to the corresponding file name
	if [[ -n "$selection" ]]; then
		# Extract episode number if available
		episode_number=$(echo "$selection" | grep -o '[0-9]\+[^: ]*')

		# Extract title if it's prefixed with "Episode X:"
		episode_title=$(echo "$selection" | sed -E 's/^Episode [0-9]+[^ ]*: (.+)/\1/; t; s/^Episode [0-9]+[^ ]*//; t')

		if [[ -n "$episode_title" ]] && ! [[ $selection =~ "Ep" ]]; then
			# Handle patterns with no episode number, matching by title
			episode_file=$(ls -p "$selected_directory" | grep -Fi "$episode_title" | grep -E '\.mp4$|\.mkv$')
		else
			# Handle both patterns with episode number
			episode_file=$(ls -p "$selected_directory" | grep -Ei "([sS][0-9]+[eE]$episode_number| - Episode $episode_number - .*| - Episode $episode_number\..*| - $episode_number[[:space:]]| - $episode_number[^a-zA-Z0-9]|[_\.x-]$episode_number[^a-zA-Z0-9])" | grep -E '\.mp4$|\.mkv$')
		fi

		if [[ -n "$episode_file" ]]; then
			play_media "$selected_directory/$episode_file"
			save_history "$show"
			prompt "$show"
		fi
	fi
}

configuration

# Parse options
while [[ $# -gt 0 ]]; do
	case "$1" in
		-s | --syncplay) player="syncplay" && shift ;;
		--movies|--shows|--anime)
			process_media "${1#--}" && rm -r "$shortcuts"
			shift # Move to next argument
			;;
		--episode)
			play_history "$2" "$3"
			shift 3 # Move past --episode and its two arguments
			;;
		--clear)
			[[ -f "$media_history" ]] && rm "$media_history" && echo "History Cleared!"
			shift # Move to next argument
			;;
		--fix)
			rm "$data_dir"/*/*.txt
			shift # Move to next argument
			;;
		--edit|-e)
			xdg-open "$config_file"
			shift # Move to next argument
			;;
		*)
			echo "Invalid option. Use --movies, --shows, --anime, --episode, --edit"
			exit 1
			;;
	esac
done
