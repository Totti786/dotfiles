#!/usr/bin/env bash

## Record Screen and Audio with ffmpeg with support for intel and nvidia gpu encoding 
# Dependencies: ffmpeg, xdpyinfo, awk, grep, pactl, pciutils, vainfo, zenity, ffmpegthumbnailer 
#				notify-send, slop, pkill, polybar-msg

## TODO
## Add logging
## Add a config file

# Define directory and file extension based on what needs to be recorded
user="$(whoami)"
backend="$XDG_SESSION_TYPE"
ffmpeg_log="$HOME/.ffmpeg.log"
ffmpeg_lock="/tmp/ffmpeg-recorder-$user.lock"
ffmpeg_lock_slop="/tmp/ffmpeg-recorder-$user-slop.lock"
ffmpeg_lock_audio="/tmp/ffmpeg-recorder-$user-audio.lock"
ffmpeg_lock_audio_wayland="/tmp/ffmpeg-recorder-$user-audio-wayland.lock"

if [[ "$@" == "--audio" ]] || [[ -e "$ffmpeg_lock_audio" ]]; then 
	file_type="m4a"
	dir="$HOME/Music/Recordings"
else
	file_type="mp4"
	dir="$HOME/Videos/Recordings"
fi

# Determine border size and slop command based on file existence
if [[ -e "$HOME"/.config/slop/highlight.frag && -e "$HOME"/.config/slop/highlight.vert ]] && [[ "$(pgrep -f 'compton|xcompmgr|picom|compfy')" ]]; then 
	slop_command=(slop -r highlight -b 5000 -f "%x %y %w %h") 
else
	color=$(xrdb -query | awk '/color13/{print $NF; exit}' | pastel format rgb-float | awk -F'[()]' '{print $2}')
	slop_command=(slop -c "$color" -b 3 -f "%x %y %w %h")
fi

# Get current timestamp
time="$(date +%Y-%m-%d-%H-%M-%S)"

# Get segment number for generating filenames
segment_number="$(cat $ffmpeg_lock 2>/dev/null | wc -l)" 
file="recording_${time}_segment_${segment_number}.$file_type"

# Get screen dimensions
#screen=$(xdpyinfo | awk '/dimensions/{print $2}')

# Get default audio sink and source
audio_sink=$(pactl info | grep 'Default Sink' | awk '{print $3}')
audio_source=$(pactl info | grep 'Default Source' | awk '{print $3}')

# Set frames per second for recording
fps="60"

# Set the logging level for ffmpeg to reduce clutter
ffmpeg_command=(ffmpeg -hide_banner -loglevel error)

# Set configurations based on available hardware
if lspci | grep -q NVIDIA; then
    ffmpeg_config=(-c:v h264_nvenc -preset p7)
elif vainfo 2>&1 | grep -q "Driver version"; then
    ffmpeg_config=(-vaapi_device /dev/dri/renderD128 -vcodec hevc_vaapi -vf 'format=nv12|vaapi,hwupload')
else
	ffmpeg_config=(-c:v libx265 -preset superfast)
fi

# Check if ffmpeg is running or paused
if [[ $(pidof ffmpeg) ]] || [[ $(pidof wf-recorder) ]]; then
    state="on"
elif [[ -e "$ffmpeg_lock" ]]; then 
    state="paused"
else
    state="off"
fi

# Create directory if it doesn't exist
if [[ ! -d "$dir" ]]; then
	mkdir -p "$dir"
fi

# Logging
echo "-----------------$time-----------------" >> "$ffmpeg_log"

# Function for countdown before starting recording
countdown() {
	for sec in $(seq $1 -1 1); do
		notify-send -e -a "Recorder" -t 1000 -r 699 "Starting in : $sec"
		sleep 1
	done
}

# Function to notify user about recording status
notify_user() {
	if [[ -e "$1" ]]; then
		local file_name="$1"
		#zenity --question --title="Rename Recording" --text="Do you want to rename the recorded file?" &&
	    #new_filename=$(zenity --entry --title="Rename Recording" --text="Enter a new filename")
	        #if [[ -n "$new_filename" ]]; then
	            ## Rename the file if a new filename is provided
	            #mv "${dir}/${file_name##*/}" "${dir}/${new_filename}.mp4"
	            #local file_name="${dir}/${new_filename}.mp4"
	        #fi
	    ffmpegthumbnailer -i "$file_name" -o /tmp/"${file_name##*/}".jpg -s 500
		notify_action=$(notify-send -a "Recorder" -u low -r 699 "Recording Saved" "Click to open" -i /tmp/"${file_name##*/}".jpg \
		--action="Open" --action="Delete")
		
		case "$notify_action" in
		"0")
		    exo-open "$file_name"
   		    #exo-open --launch FileManager "$file_name"
		    ;;
		"1")
		    rm "$file_name"
		    ;;
		esac
	else
		notify-send -a "Recorder" -u low -r 699 "Recording Canceled"
	fi
}

# Function to cancel the recording if ffmpeg fails to record
catch_error(){
	exit_code="$?"
	if [[ -e "$ffmpeg_lock_audio" ]]; then
		[[ "$exit_code" != 255 ]] && cancel_recording
	elif [[ "$backend" == "wayland" ]]; then
		[[ "$exit_code" != 0 ]] && cancel_recording
	else
		[[ "$exit_code" != 255 ]] && cancel_recording
	fi
	echo "$exit_code"
}

# Function to capture screen recording with or without audio
record_screen() {		
	signal_start
	
	if [[ "$1" == "--noaudio" ]]; then
		if [[ "$backend" == "wayland" ]]; then
			wf-recorder -d /dev/dri/renderD128 -c hevc_vaapi -r "$fps" -f ${dir}/${file}
		else
			"${ffmpeg_command[@]}" -f x11grab -framerate "$fps" -video_size "$screen" -i :0.0 -thread_queue_size 4096 \
			${ffmpeg_config[@]} ${dir}/${file}
		fi
	else
		if [[ "$backend" == "wayland" ]]; then
			wayland_audio
			wf-recorder -d /dev/dri/renderD128 -c hevc_vaapi -r "$fps" --audio=Combined.monitor -f ${dir}/${file}
		else
			"${ffmpeg_command[@]}" -f x11grab -framerate "$fps" -video_size "$screen" -i :0.0 -thread_queue_size 4096 \
			-f pulse -thread_queue_size 4096 -i ${audio_sink}.monitor \
	        -f pulse -thread_queue_size 4096 -i ${audio_source} \
			-filter_complex "[1:a][2:a]amerge=inputs=2[out]" \
			-map 0:v -map "[out]" -map 1:a -map 2:a -c:a aac -b:a 192k -ac 2 \
			${ffmpeg_config[@]} ${dir}/${file}
		fi
	fi
	
	catch_error # Check ffmpeg execution status after the command
}

# Function to capture area recording with or without audios
record_area() {
	# Get area for area recording using slop or slurp
	if [[ "$backend" == "wayland" ]]; then
		touch "$ffmpeg_lock_slop"
	else
		if [[ -e "$ffmpeg_lock_slop" ]]; then
			read -r X Y W H < <(cat "$ffmpeg_lock_slop")
		else
			get_win_data=$("${slop_command[@]}")
			if [[ -z "$get_win_data" ]]; then 
				cancel_recording
				exit 0
			else
				echo "$get_win_data" > "$ffmpeg_lock_slop"
			fi
			read -r X Y W H < <(echo "$get_win_data")
		fi
	fi

	signal_start
	
	if [[ "$1" == "--noaudio" ]]; then
		if [[ "$backend" == "wayland" ]]; then
			wf-recorder -d /dev/dri/renderD128 -c hevc_vaapi -r "$fps" -g "$(slurp -c "$color" -b 00000055)"  -f ${dir}/${file}
		else
			"${ffmpeg_command[@]}" -f x11grab -framerate "$fps" -video_size ${W}x${H} -i :0.0+${X},${Y} -thread_queue_size 4096 \
			${ffmpeg_config[@]} ${dir}/${file}
		fi
	else
		if [[ "$backend" == "wayland" ]]; then
			wayland_audio
			wf-recorder -d /dev/dri/renderD128 -c hevc_vaapi -r "$fps" --audio=Combined.monitor -g "$(slurp -c "$color" -b 00000055)"  -f ${dir}/${file}
		else
			"${ffmpeg_command[@]}" -f x11grab -framerate "$fps" -video_size ${W}x${H} -i :0.0+${X},${Y} -thread_queue_size 4096 \
			-f pulse -thread_queue_size 4096 -i ${audio_sink}.monitor \
	        -f pulse -thread_queue_size 4096 -i ${audio_source} \
			-filter_complex "[1:a][2:a]amerge=inputs=2[out]" \
			-map 0:v -map "[out]" -map 1:a -map 2:a -c:a aac -b:a 192k -ac 2 \
			${ffmpeg_config[@]} ${dir}/${file}
		fi
	fi
	
	catch_error  # Check ffmpeg execution status after the command
}

# Function to capture audio only
record_audio() {
	touch "$ffmpeg_lock_audio"
		
	signal_start
	
	"${ffmpeg_command[@]}" -f pulse -i ${audio_sink}.monitor -f pulse -i ${audio_source} \
	-filter_complex "[1:a][0:a]amerge=inputs=2[out]" \
	-map "[out]" -map 0:a -map 1:a -c:a aac -b:a 256k \
	${dir}/${file}
	
	catch_error # Check ffmpeg execution status after the command
}

wayland_audio(){	
	if [ -f "$ffmpeg_lock_audio_wayland" ]; then 
		for module in $(cat "$ffmpeg_lock_audio_wayland"); do 
			pactl unload-module "$module"
		done
	else
		touch "$ffmpeg_lock_audio_wayland"
		pactl load-module module-null-sink sink_name=Combined >> "$ffmpeg_lock_audio_wayland"
		pactl load-module module-loopback sink=Combined source=${audio_sink}.monitor >> "$ffmpeg_lock_audio_wayland"
		pactl load-module module-loopback sink=Combined source=$audio_source >> "$ffmpeg_lock_audio_wayland"
	fi
}

# Function to stop ongoing recording and merge segments
toggle_recording() {
    #if [[ ! -e "$ffmpeg_lock" ]]; then exit 0 ;fi
	
	if [[ "$state" == "on" ]]; then
		# Pause recording
        pkill ffmpeg
        pkill wf-recorder
        [[ $(pidof polybar) ]] && polybar-msg action "#recorder.hook.2"
	else
        # Resume recording
   		[[ $(pidof polybar) ]] && polybar-msg action "#recorder.hook.1"
   		if [[ -e "$ffmpeg_lock_slop" ]]; then
			record_area &
   		else
			record_screen &
		fi
	fi

}

# Function to signal the start of recording
signal_start(){
	countdown 2
	[[ $(pidof polybar) ]] && polybar-msg action "#recorder.hook.1"
	echo "file '${dir}/${file}'" >> "$ffmpeg_lock"
}

# Function to signal the stop of recording
signal_stop(){
	[[ $(pidof polybar) ]] && polybar-msg action "#recorder.hook.0"
	rm /tmp/ffmpeg-recorder*
}

stop_recording(){
	if [[ ! -e "$ffmpeg_lock" ]]; then exit 1 ;fi
	
	if [[ -e "$ffmpeg_lock_audio" ]]; then
		pkill ffmpeg && while pgrep -l ffmpeg; do sleep 0.5;done
	elif [[ "$backend" == "wayland" ]]; then
	    pkill wf-recorder && while pgrep -l wf-recorder; do sleep 0.5;done
	    [[ ! -f "$ffmpeg_lock_audio_wayland" ]] && wayland_audio
	else
		pkill ffmpeg && while pgrep -l ffmpeg; do sleep 0.5;done
	fi
	
	# Merge all segments into a single file
	merged_file="$(awk -F"'" 'NR==1 {gsub("_segment_0", "", $2); print $2}' "$ffmpeg_lock")"
	"${ffmpeg_command[@]}" -y -f concat -safe 0 -i "$ffmpeg_lock" -c copy -map 0:v? -map 0:a? "${merged_file}"
	if [[ "$?" == 0 ]]; then
		# Remove individual segment files
		rm "${dir}/recording_"*"_segment_"*.*
	else
		# Move segments to a different directory when merging fails
		mkdir -p "${dir}/Corrupt"
		for file in "${dir}"/recording_*_segment_*.*; do
		    mv "$file" "${dir}/Corrupt/$(basename "$file")"
		done
	fi
	signal_stop
	notify_user "$merged_file" &
}

# Function to cancel ongoing recording
cancel_recording() {
	if [[ ! -e "$ffmpeg_lock" ]]; then exit 1 ;fi
	pkill -9 ffmpeg
	rm "${dir}/recording_"*"_segment_"*.*
	signal_stop
	notify_user
}

# Help section
show_help() {
    echo "Usage: ${0##*/} [ ]"
    echo "Options:"
    echo "  --screen        Start screen recording"
    echo "  --area          Start area recording"
    echo "  --audio         Start audio recording"
    echo "  --toggle        Pause/resume ongoing recording"
    echo "  --stop          Stop ongoing recording"
    echo "  --cancel        Cancel ongoing recording"
    echo "  --status        Check recording status"
    echo "  --help          Show this help message"
}

# Command-line argument handling
case "$1" in
    "--status")
        echo "$state"
        ;;
    "--screen")
		if [[ "$state" == "on" ]]; then echo "Already Recording" ;exit 0 ;fi
        record_screen "$2" >> "$ffmpeg_log" 2>&1 & disown
        ;;
    "--area")
    	if [[ "$state" == "on" ]]; then echo "Already Recording" ;exit 0 ;fi
        record_area "$2" >> "$ffmpeg_log" 2>&1 & disown
        ;;
    "--audio")
    	#if [[ "$state" == "on" ]]; then echo "Already Recording" ;exit 0 ;fi
        record_audio >> "$ffmpeg_log" 2>&1 & disown
        ;;
    "--stop")
        stop_recording >> "$ffmpeg_log" 2>&1 & disown
        ;;
    "--cancel")
        cancel_recording
        ;;
    "--toggle")
        toggle_recording
        ;;
    "--help" | "-h" | "")
        show_help
        ;;
    *)
        echo "Invalid option. Use --help for usage instructions."
        exit 1 ;;
esac
