#!/usr/bin/env bash

# TODO
# Add support for live wallpapers for both wayland and xorg
# using xwinwrap and mpvpaper 
# ffmpeg -i input_video.mp4 -vframes 1 first_frame.png
# xwinwrap -ni -ov -fs -- mpv -wid WID --loop=inf -quiet input_video.mp4
# mpvpaper '*' ./Downloads/mylivewallpapers.com-Eren-Titan.mp4

# Color files
config="$HOME/.config"
config_file="$HOME/.theme"
alacritty="$config/alacritty/colors.toml"
polybar="$config/polybar/colors.ini"
rofi="$config/rofi/themes/colors.rasi"
discord="$config/Equicord/themes/caelestia.theme.css"
dunst="$config/dunst/dunstrc"
geany="$config/geany/colorschemes/Pywal.conf"
copyq="$config/copyq/copyq.conf"
jgmenu="$config/jgmenu/jgmenurc"
spotify="$config/spicetify/Themes/pywal/color.ini"
hypr="$config/hypr/colors.conf"
kde="$config/kdeglobals"
sniffnet="$config/sniffnet/colors.toml"
wallpapers_dir="$HOME/Pictures/Wallpapers"

# Source theme file
if [[ -f "$HOME/.cache/wal/colors.sh" ]]; then
	source "$HOME/.cache/wal/colors.sh"
else
	echo "[!] Theme file not found"
	exit 1
fi

# Source config file
if [[ -f "$config_file" ]]; then
	source "${config_file}"
else
	echo -e "# wpgtk config file\ntransparency='false'" > "${config_file}"
fi

## Change colors
change_colors(){
	transparent
	run &&
	# polybar	
	cat > "$polybar" <<- EOF
		[color]
		;; main colors
		background = ${background}
		background-alt = ${bg_mix}
		foreground = $foreground
		primary = $foreground
		red = $bright_red
		green = $bright_green
		yellow = $bright_yellow
		blue = $bright_blue
		magenta = $bright_magenta
		cyan = $bright_cyan
		white = $white
		EOF
	
	# rofi
	cat > "$rofi" <<- EOF
	/* colors */
	* {
		background:       ${bg_mix}$alpha_rofi;
		background-alt:   ${bg_light};
		background-blur:  ${background}60;
		foreground:       ${foreground};
		selected:         ${red};
		highlight:        ${yellow};
		urgent:           ${blue};
		on:               ${magenta};
		off:              ${black};
		red:			  ${bright_red};
		green:			  ${bright_green};
		yellow:			  ${bright_yellow};
		blue:			  ${bright_blue};
		magenta:		  ${bright_magenta};
		cyan:			  ${bright_cyan};
		white:			  ${bright_white};
	}
		EOF
	
	# alacritty 
	cat > "$alacritty" <<- EOF 
	[colors.bright]
	black =      "$bright_black"
	red =        "$bright_red"
	green =      "$bright_green"
	yellow =     "$bright_yellow"
	blue =       "$bright_blue"
	magenta =    "$bright_magenta"
	cyan =       "$bright_cyan"
	white =      "$bright_white"
	
	[colors.cursor]
	text =      "$black"
	cursor =    "$white"
	
	[colors.normal]
	black =      "$black"
	red =        "$red"
	green =      "$green"
	yellow =     "$yellow"
	blue =       "$blue"
	magenta =    "$magenta"
	cyan =       "$cyan"
	white =      "$white"
	
	[colors.primary]
	background = "$background"
	foreground = "$foreground"
	EOF
	
	# geany
	sed -i "$geany" \
		-e "s/bg=.*/bg=${background}/g" \
		-e "s/fg=.*/fg=${foreground}/g" \
		-e "s/tag_yellow=.*/tag_yellow=${cyan}/g" \
		-e "s/fold_bg_grey=.*/fold_bg_grey=${bg_lighter}/g" \
		-e "s/keyword_orange=.*/keyword_orange=${red}/g" \
		-e "s/string_green=.*/string_green=${green}/g" \
		-e "s/margin_bg_grey=.*/margin_bg_grey=${black}/g" \
		-e "s/margin_fg_grey=.*/margin_fg_grey=${black}/g" \
		-e "s/error_red=.*/error_red=${magenta}/g" \
		-e "s/current_line_grey=.*/current_line_grey=${bg_lighter}/g" \
		-e "s/selection_blue=.*/selection_blue=${white}/g"
	
	if [[ -f "$hypr" ]]; then 
	# hypr	
	cat > "$hypr" <<- EOF 
	\$black		= rgba(${black:1}aa)
	\$red 		= rgba(${red:1}ff)
	\$green		= rgba(${green:1}ff)
	\$yellow 	= rgba(${yellow:1}ff)
	\$blue 		= rgba(${blue:1}ff)
	\$magenta 	= rgba(${magenta:1}ff)
	\$cyan 		= rgba(${cyan:1}ff)
	\$white     	= rgba(${white:1}ff)
	EOF
	fi
	
	# copyq 
	sed -i "$copyq" \
		-e "s/bg=#.*/bg=${background}/g" \
		-e "s/alt_bg=#.*/alt_bg=$bg_mix/g" \
		-e "s/fg=#.*/fg=${foreground}/g" \
		-e "s/sel_bg=#.*/sel_bg=$cyan/g" \
		-e "s/sel_fg=#.*/sel_fg${foreground}/g"
		
	# dunst
	sed -i "$dunst" \
		-e "s/background = .*/background = \"${bg_light}$alpha_dunst\"/g" \
		-e "s/foreground = .*/foreground = \"${foreground}\"/g" \
		-e "s/highlight = .*/highlight = \"${foreground}\"/g" \
		-e "s/frame_color = .*/frame_color = \"${green}CF\"/g"

	# jgmenu 
	sed -i "$jgmenu" \
		-e "s/color_menu_bg        = .*/color_menu_bg        = ${bg_mix} $alpha_jg/g" \
		-e "s/color_norm_fg        = .*/color_norm_fg        = ${foreground} 100/g" \
		-e "s/color_sel_bg         = .*/color_sel_bg         = ${bright_black} 40/g" \
		-e "s/color_sel_fg         = .*/color_sel_fg         = ${bright_red} 100/g" \
		-e "s/color_sep_fg         = .*/color_sep_fg         = ${bright_blue} 40/g"

	# discord
	if [[ -f "$discord" ]]; then 
	sed -i "$discord" \
		-e "s/--text-2: .*/--text-2: ${bright_white};/g" \
		-e "s/--text-3: .*/--text-3: ${foreground};/g" \
		-e "s/--text-4: .*/--text-4: ${foreground};/g" \
		-e "s/--text-5: .*/--text-5: ${foreground};/g" \
		-e "s/--accent-1: .*/--accent-1: ${red};/g" \
		-e "s/--accent-2: .*/--accent-2: ${green};/g" \
		-e "s/--accent-3: .*/--accent-3: ${blue};/g" \
		-e "s/--accent-4: .*/--accent-4: ${yellow};/g" \
		-e "s/--accent-5: .*/--accent-5: ${magenta};/g" \
		-e "s/--bg-1: .*/--bg-1: ${bg_light};/g" \
		-e "s/--bg-2: .*/--bg-2: ${background};/g" \
		-e "s/--bg-3: .*/--bg-3: ${bg_light};/g" \
		-e "s/--bg-4: .*/--bg-4: ${bg_mix};/g"
	fi 

	# sniffnet
	if [[ -f "$sniffnet" ]]; then 
		cat > "$sniffnet" <<- EOF
		primary= "${bg_mix}"
		secondary= "${bright_black}"
		outgoing= "${bright_red}"
		text_body= "${foreground}"
		text_headers= "${bright_blue}"
		starred= "${bright_yellow}"
		EOF
	fi

	# spotify
	# Spotify can be themed using the xrdb backend i.e. ${xrdb:color0:#222}
	if [[ -f "$spotify" ]]; then 
	cat > "$spotify" <<- EOF
	[pywal]
	text               = ${bright_white:1}
	subtext            = ${bright_white:1}
	main               = ${bg_light:1}
	main-elevated      = ${bg_mix:1}
	highlight          = ${magenta:1}
	highlight-elevated = ${bright_magenta:1}
	sidebar            = ${bg_mix:1}
	player             = ${blue:1}
	card               = ${green:1}
	shadow             = ${bright_black:1}
	selected-row       = ${green:1}
	button             = ${red:1}
	button-active      = ${bright_red:1}
	button-disabled    = ${blue:1}
	tab-active         = ${yellow:1}
	notification       = ${cyan:1}
	notification-error = ${bright_red:1}
	equalizer          = ${white:1}
	misc               = ${red:1}
	EOF
	fi
	
	# KDE colors
	cat > "$kde" <<- EOF	
	[Colors:Selection]
	BackgroundNormal=$background
	ForegroundActive=$foreground
	ForegroundInactive=$bg_light
	ForegroundNegative=$yellow
	
	[Colors:View]
	BackgroundAlternate=$bg_light
	BackgroundNormal=$bg_mix
	DecorationFocus=$red
	DecorationHover=$yellow
	ForegroundActive=$foreground
	ForegroundInactive=$bright_white
	ForegroundLink=$red
	ForegroundNegative=$background
	ForegroundNeutral=$foreground
	ForegroundNormal=$foreground
	ForegroundPositive=$green
	ForegroundVisited=$blue
	EOF
	
	# zathura and sioyek
	reader-colors
	
	# resize and move wallpaper for use by other programs
	ln -sf "$wallpaper" "$HOME"/.config/wpg/wallpapers/
}

qt_colors(){
	material
	python "$config/Kvantum/Colloid/changeAdwColors.py" &> /dev/null
	python "$config/Kvantum/Colloid/adwsvgDark.py" &> /dev/null
}

toggle_transparency(){
	if [[ "$transparency" == "true" ]]; then 
		sed -i "s/transparency=.*/transparency='false'/" "$config_file"
		transparency='false'
	else
		sed -i "s/transparency=.*/transparency='true'/" "$config_file"
		transparency='true'
	fi
	change_colors
}

transparent(){
	if [[ "$transparency" == "false" ]]; then 
		sed -i "s/opacity =.*/opacity = 1.0/" "${alacritty%/*}/alacritty.toml"
		sed -i "s/frame_width = .*/frame_width = 0/" "$dunst"
		sed -i "/^[^#]*opacity/s/^/#/" "$HOME"/.config/hypr/hyprland.conf
		alpha_jg="100"
		alpha_rofi="ff"
		alpha_dunst="ff" 
	else 
		sed -i "s/opacity =.*/opacity = 0.85/" "${alacritty%/*}/alacritty.toml"
		sed -i "s/frame_width = .*/frame_width = 3/" "$dunst"
		sed -i "/opacity/s/^#//" "$HOME"/.config/hypr/hyprland.conf
		alpha_jg="70"
		alpha_rofi="70"
		alpha_dunst="99"
	fi
	sed -i "s/\"transparency\": [^,]*/\"transparency\": $transparency/" "$HOME/.config/illogical-impulse/config.json"
}

# this functions should only be used if you have a system with a seperate home partition 
# (this is bad)
lockPerms(){
	## give the user read and write permissions to the sddm directory
	if [[ -d "/usr/share/sddm/themes/Chili" ]]; then
		sudo chgrp -R "$(whoami)" /usr/share/sddm/
		sudo chmod -R ug+rwX  /usr/share/sddm/
	else
		echo "Can't find a compatible sddm theme"
	fi
}

# this funcction only works after using the lockPerms function
copyWal(){
	# copy background to sddm theme
	if [[ -d "/usr/share/sddm/themes/Chili" ]]; then
		cp "$wallpaper" "/usr/share/sddm/themes/Chili/components/artwork/background.jpg"
	else
		echo "Can't find a compatible sddm theme"
	fi
}

## Kill already running process
restart(){
	local cmd="$1"
    shift
	if [[ "$(pidof $cmd)" ]]; then
		killall "$cmd" && sleep 0.5
        "$cmd" "$@" & disown
	else 
        "$cmd" "$@" & disown
	fi
}
	
## Check if the command exists and then runs it
check(){
	local cmd="$1"
    shift
    if command -v "$cmd" >/dev/null 2>&1; then
        "$cmd" "$@" & disown
    fi
}

wall() {
    if [[ -z "$1" ]]; then
        echo "No image was selected"
        exit
    fi

    local wallpaper="$1"
    local type="${wallpaper##*.}"

    if [[ "$type" == "mp4" || "$type" == "gif" ]]; then
        local wall="$HOME/.cache/wall/${wallpaper##*/}.png"
        [[ ! -f "$wall" ]] && ffmpeg -y -i "$wallpaper" -vframes 1 "$wall" &> /dev/null
        if [[ "$XDG_SESSION_TYPE" == "x11" ]]; then
			[[ "$(pgrep xwinwrap)" ]] && pkill xwinwrap
            xwinwrap -ni -ovr -- mpv -wid WID --loop=inf -quiet "$wallpaper" &
        elif [[ "$XDG_SESSION_TYPE" == "wayland" ]]; then
			[[ "$(pgrep mpvpaper)" ]] && pkill mpvpaper
            mpvpaper -o "no-audio --loop-playlist"  '*' "$wallpaper" &
        fi
    else
		local wall="$wallpaper"
	    if [[ "$XDG_SESSION_TYPE" == "x11" ]]; then
			feh --no-fehbg --bg-fill "$wall"
		elif [[ "$XDG_SESSION_TYPE" == "wayland" ]]; then
            #swww query || swww-daemon -q & disown
			#swww img "$wall" \
				#--transition-step 120 \
				#--transition-fps 120 \
				#--transition-type grow \
				#--transition-duration 1 & disown
				
			# Update wallpaper path in config
			SHELL_CONFIG_FILE="$HOME/.config/illogical-impulse/config.json"
            if [ -f "$SHELL_CONFIG_FILE" ]; then
                jq --arg path "$wallpaper" '.background.wallpaperPath = $path' "$SHELL_CONFIG_FILE" > "$SHELL_CONFIG_FILE.tmp" && mv "$SHELL_CONFIG_FILE.tmp" "$SHELL_CONFIG_FILE"
                
                "$HOME"/.config/quickshell/ii/scripts/images/least_busy_region.py --screen-width "1920" \
				--screen-height "1080" --width 300 --height 200 \
				"$wallpaper" > "$HOME"/.local/state/quickshell/user/generated/wallpaper/least_busy_region.json &
            fi
	    fi
    fi

	wpg -A "$wall" && wpg -s "$wall"
	rm "${wall}_wal_sample.png"
    exit
}

restore() {
	run

	case "$XDG_SESSION_TYPE" in
	x11)
		feh --no-fehbg --bg-fill "$wallpaper"
		;;
	wayland)
		# Apply Gtk Theme
		gsettings set org.gnome.desktop.interface icon-theme "$icon_theme"
		gsettings set org.gnome.desktop.interface gtk-theme "$gtk_theme"
		gsettings set org.gnome.desktop.interface font-name "$font_name"
		gsettings set org.gnome.desktop.interface cursor-theme "$cursor_theme"

		# Set cursor for Hyprland
		[[ "$XDG_CURRENT_DESKTOP" == "Hyprland" ]] && hyprctl setcursor "$cursor_theme" 24 &> /dev/null

		SHELL_CONFIG_FILE="$HOME/.config/illogical-impulse/config.json"
		if [ -f "$SHELL_CONFIG_FILE" ]; then
			jq --arg path "$wallpaper" '.background.wallpaperPath = $path' "$SHELL_CONFIG_FILE" > "$SHELL_CONFIG_FILE.tmp" && mv "$SHELL_CONFIG_FILE.tmp" "$SHELL_CONFIG_FILE"
		fi
		## Start swww if not running
		#swww query &>/dev/null || (swww-daemon -q & disown)

		#current_wallpaper="$(swww query | awk -F 'image: ' '{print $2}')"
		#if [[ "$current_wallpaper" != "$wallpaper" ]]; then
			#swww img "$wallpaper" \
				#--transition-step 100 \
				#--transition-fps 120 \
				#--transition-angle 30 \
				#--transition-type any \
				#--transition-duration 1 & disown
		#fi
		;;
	esac
}

setup(){
	images=($(find $wallpapers_dir -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" \)))
    for ((i=0; i<${#images[@]}; i++)); do
		wpg -A "${images[i]}" && rm "${images[i]}""_wal_sample.png"
	done
}

# Set Random Wallpaper from ~/Pictures/Wallpaper
random(){
	if [[ "$(ls -A $wallpapers_dir)" ]]; then 
		image="$(fd -e jpg -e jpeg -e png . "$wallpapers_dir" -0 | shuf -zn1 | tr -d '\0')"
		wall "$image"
	else
		notify-send -u low -r 43 "No Wallpapers Were Found in:" "~/Pictures/Wallpapers"
	fi
}

# This function uses nsxiv or waypaper as a wallpaper selector for wpg.
# To set a wallpaper in nsxiv, select a wallpaper by pressing "m" and then quitting.
pick() {
	if [[ -z "$(ls -A "$wallpapers_dir" 2>/dev/null)" ]]; then
		notify-send -u low -r 43 "No Wallpapers Found" "$wallpapers_dir"
		return 1
	fi

	if command -v waypaper >/dev/null 2>&1; then
		[[ -z $(pgrep waypaper) ]] && waypaper || echo "Chill!"
	else
		wal=$(nsxiv -torb "$wallpapers_dir") || return 1
		[[ -n "$wal" ]] && wall "$wal"
	fi
}


# Needs fixing
dynamic(){
	dynmaic_wall="$HOME/Pictures/Dynamic"
	if [[ -d "$dynmaic_wall" ]]; then 
		ls "$dynmaic_wall"
		# get current hour
		if [[ ! -z "$1" ]]; then
			num=$(($(date +%k)/1))
			image="$dynmaic_wall/$1/$num"

			# get image format
			if [[ -f "${image}.png" ]]; then
				wall "$dynmaic_wall/$1/$num.png"
			elif [[ -f "${image}.jpg" ]]; then
				wall "$dynmaic_wall/$1/$num.jpg"
			fi	
		fi
	else
		echo "Dynamic Wallpapers Not Found!"
	fi
}
	
## Send a signal to phone to change wallpaper (requires Automate to be set up)
phone() {
	run

	if ! command -v kdeconnect-cli &>/dev/null; then
		echo "KDE Connect is not installed"
		return 1
	fi

	device_id="$(kdeconnect-cli -a --id-only | head -n1)"
	if [[ -z "$device_id" ]]; then
		echo "No KDE Connect device found"
		return 1
	fi

	tmp_wallpaper="/tmp/wallpaper.jpg"
	cp "$wallpaper" "$tmp_wallpaper"

	if kdeconnect-cli -d "$device_id" --share "$tmp_wallpaper" &&
	   kdeconnect-cli -d "$device_id" --ping; then
		echo "Wallpaper sent and pinged successfully"
	else
		echo "Failed to share wallpaper or ping device"
		return 1
	fi
}

	
partial(){
	change_colors

	if [[ "$XDG_SESSION_TYPE" == "x11" ]]; then 
		# Reload GTK
		xfconf-query -c xsettings -p /Net/ThemeName -s "Dummy" &&
		xfconf-query -c xsettings -p /Net/ThemeName -s "$gtk_theme"
		
		restart "copyq --start-server"
		restart "dunst"
		conky.sh restart &
		#pkill dunst; dunst > /dev/null 2>&1 & disown
		
		"$HOME/.config/polybar/launch.sh" &> /dev/null &
		[[ "$XDG_CURRENT_DESKTOP" == "bspwm" ]] && "$HOME"/.config/bspwm/bsp-border &
	elif [[ "$XDG_SESSION_TYPE" == "wayland" ]]; then	
		# Reload GTK
		gsettings set org.gnome.desktop.interface gtk-theme "Dummy"
		gsettings set org.gnome.desktop.interface gtk-theme "$gtk_theme"
		
		# Quickshell
		if [[ -n $(pgrep -f "qs|quickshell") ]]; then
			ln -sf "$HOME"/.cache/wal/colors-qs.json "$HOME"/.local/state/quickshell/user/generated/colors.json			
	    fi
	fi
	check spicetify -q refresh &
	check pywalfox update >/dev/null 2>&1 &
	check razer-cli -a &
}

main(){
	partial
	qt_colors
	papirus-folder.sh ${red} &
	copyWal
	magick "$wallpaper" -scale 20% -blur 0x2 -resize \
	"$(xdpyinfo | awk '/dimensions/{print $2}')" \
	"$HOME/.config/wpg/templates/wallpaper.jpg"
	exit
}

## Check if wpg is installed and get colors
run(){
	if [[ ! -f "/usr/bin/wpg" ]]; then
		echo "[!] 'wpgtk' is not installed."
		echo "Installing from the AUR..." 
		yay -S wpgtk --noconfirm
		# this command installs gtk, and openbox themes
		wpg-install.sh -g -o
	fi

	# Normal colors
	background="$(printf "%s\n" "$background")"
	foreground="$(printf "%s\n" "$foreground")"
	black="$(printf "%s\n" "$color0")"
	red="$(printf "%s\n" "$color1")"
	green="$(printf "%s\n" "$color2")"
	yellow="$(printf "%s\n" "$color3")"
	blue="$(printf "%s\n" "$color4")"
	magenta="$(printf "%s\n" "$color5")"
	cyan="$(printf "%s\n" "$color6")"
	white="$(printf "%s\n" "$color7")"
	# Bright colors
	bright_black="$(printf "%s\n" "$color8")"
	bright_red="$(printf "%s\n" "$color9")"
	bright_green="$(printf "%s\n" "$color10")"
	bright_yellow="$(printf "%s\n" "$color11")"
	bright_blue="$(printf "%s\n" "$color12")"
	bright_magenta="$(printf "%s\n" "$color13")"
	bright_cyan="$(printf "%s\n" "$color14")"
	bright_white="$(printf "%s\n" "$color15")"
	# Additional colors
	bg_mix="$(pastel mix -f 0.4 $bright_black $black | pastel format hex)"
	bg_light="$(pastel mix -f 0.2 $bright_black $black | pastel format hex)"
	bg_lighter="$(pastel lighten 0.08 $black | pastel format hex)"
	bg_dark="$(pastel darken 0.02 ${background:1} | pastel format hex)"

	#bg=$(pastel mix -f 0.2 "$black" "$bright_black" | pastel format hex) # 20%
	
	#bg_mix=$(pastel mix -f 0.8 "$black" "$bright_black" | pastel format hex) # 80%
	#bg_dark=$(pastel mix -f 0.45 "$black" "$bright_black" | pastel format hex) # Darken 10%
	#bg_darker=$(pastel mix -f 0.4 "$color0" "$color8" | pastel format hex) # 40%

	#bg_light=$(pastel lighten 0.1 "$black" | pastel format hex) # Lighten 10%
	#bg_lighter=$(pastel lighten 0.2 "$black" | pastel format hex) # Lighten 20%
	
	#fg_mix=$(pastel mix -f 0.3 "$color7" "$color15" | pastel format hex) # 30%
	#fg_light=$(pastel lighten 0.2 "$color5" | pastel format hex) # Lighten 20%
	
	bg_rgb="$(pastel format rgb ${bg_mix:1})"
	bg_mix_rgb="$(pastel format rgb ${bg_mix:1})"
	
	## merging the Xresources files with the main one
	xrdb -merge "$HOME"/.cache/wal/colors.Xresources

}

help(){
    echo "Usage: ${0##*/} [options]"
    echo "Options:"
    echo "  -h, --help       Show this help message and exit"
    echo "  --restore        Restore previous wallpaper"
    echo "  --random         Set a random wallpaper"
    echo "  --set            Set a specific wallpaper"
    echo "  --pick           Pick a wallpaper manually"
    echo "  --phone          Set a phone wallpaper"	
    echo "  --reload         Reload colors"	
    echo "  --restart        Restart apps and reload colors"	
}

case "$1" in
	-h|--help)
		help
		;;
	--run)
		run
		exit 0
		;;
	--restore)
		restore
		exit 0
		;;
	--random)
		random
		exit 0
		;;
	--purge)
		rm "$wallpaper"
		random
		exit 0
		;;
	--set)
		wall "$2"
		exit 0
		;;
	--pick)
		pick
		exit 0
		;;
	--phone)
		phone
		exit 0
		;;
	--colors)
		run
		exit 0
		;;
	--trans)
		toggle_transparency
		exit 0
		;;
	--material)
		material
		exit 0
		;;
	--apply)
		change_colors
		exit 0
		;;
	--lock)
		lockPerms
		exit 0
		;;
	--reload)
		partial
		exit 0
		;;
	--restart)
		main
		exit 0
		;;
	*)
		echo "Unknown option: $1"
		help
		;;
esac
