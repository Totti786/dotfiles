#!/usr/bin/env bash

# Color files
config="$HOME/.config"
alacritty="$config/alacritty/colors.yml"
polybar="$config/polybar/colors.ini"
rofi="$config/rofi/themes/colors.rasi"
discord="$config/BetterDiscord/data/stable/custom.css"
dunst="$config/dunst/dunstrc"
geany="$config/geany/colorschemes/Pywal.conf"
zathura="$config/zathura/zathurarc"
gzathura="$config/zathura/genzathurarc"
copyq="$config/copyq/copyq.conf"
jgmenu="$config/jgmenu/jgmenurc"
eww="$config/eww/colors.scss"
waybar="$config/waybar/colors.css"
hypr="$config/hypr/colors.conf"
Wallpapers="$HOME/Pictures/Wallpapers"
alpha='FF'

## Change colors
change_colors(){
	run &&
	
	# polybar	
	cat > "$polybar" <<- EOF
		[color]
		;; main colors
		background = ${BG}$alpha
		background-alt = ${bg_mix}
		foreground = $FG
		primary = $FG
		red = $red
		green = $green
		yellow = $yellow
		blue = $blue
		magenta = $magenta
		cyan = $cyan
		white = $white
		EOF
	
	# rofi
	[[ "$alpha" != "FF" ]] && alpha_rofi="90" || alpha_rofi="$alpha"
	cat > "$rofi" <<- EOF
	/* colors */
	* {
		background:       ${bg_mix}$alpha_rofi;
		background-alt:   ${BG};
		foreground:       ${FG};
		selected:         ${red};
		highlight:        ${yellow};
		urgent:           ${blue};
		on:               ${magenta};
		off:              ${black};
	}
		EOF
	
	# alacritty 
	cat > "$alacritty" <<- EOF 
	#Colors 
	colors:
	  primary:
	    background: '$BG'
	    foreground: '$FG'
	  cursor:
	    text:       '$black'
	    cursor:     '$white'
	  normal:
	    black:      '$black'
	    red:        '$red'
	    green:      '$green'
	    yellow:     '$yellow'
	    blue:       '$blue'
	    magenta:    '$magenta'
	    cyan:       '$cyan'
	    white:      '$white'
	  bright:
	    black:      '$bright_black'
	    red:        '$bright_red'
	    green:      '$bright_green'
	    yellow:     '$bright_yellow'
	    blue:       '$bright_blue'
	    magenta:    '$bright_magenta'
	    cyan:       '$bright_cyan'
	    white:      '$bright_white'
	EOF
	
	if [[ "$alpha" == "FF" ]]; then 
		sed -i "s/opacity: .*/opacity: 1.0/" "$config/alacritty/alacritty.yml"
	else 
		sed -i "s/opacity: .*/opacity: 0.7/" "$config/alacritty/alacritty.yml"
	fi
	
	# geany
	sed -i "$geany" \
		-e "s/bg=.*/bg=${BG}/g" \
		-e "s/fg=.*/fg=${FG}/g" \
		-e "s/tag_yellow=.*/tag_yellow=${cyan}/g" \
		-e "s/fold_bg_grey=.*/fold_bg_grey=${BG}/g" \
		-e "s/keyword_orange=.*/keyword_orange=${red}/g" \
		-e "s/string_green=.*/string_green=${green}/g" \
		-e "s/margin_bg_grey=.*/margin_bg_grey=${black}/g" \
		-e "s/margin_fg_grey=.*/margin_fg_grey=${black}/g" \
		-e "s/error_red=.*/error_red=${magenta}/g" \
		-e "s/selection_blue=.*/selection_blue=${white}/g"
		
	# copyq 
	sed -i "$copyq" \
		-e "s/bg=#.*/bg=${BG}/g" \
		-e "s/alt_bg=#.*/alt_bg=$bg_mix/g" \
		-e "s/fg=#.*/fg=${FG}/g" \
		-e "s/sel_bg=#.*/sel_bg=$cyan/g" \
		-e "s/sel_fg=#.*/sel_fg${FG}/g"
		
	# dunst
	sed -i "$dunst" \
		-e "s/background = \"#.*\"/background = \"${bg_light}$alpha\"/g" \
		-e "s/foreground = \"#.*\"/foreground = \"${FG}\"/g" \
		-e "s/highlight = \"#.*\"/highlight = \"${FG}\"/g" \
		-e "s/frame_color = \"#.*\"/frame_color = \"${green}CF\"/g"

	# jgmenu 
	[[ "$alpha" == "FF" ]] && alpha_jg="100" || alpha_jg="$alpha"
	sed -i "$jgmenu" \
		-e "s/color_menu_bg        = .*/color_menu_bg        = ${bg_mix} $alpha_jg/g" \
		-e "s/color_norm_fg        = .*/color_norm_fg        = ${FG} 100/g" \
		-e "s/color_sel_bg         = .*/color_sel_bg         = ${bright_black} 40/g" \
		-e "s/color_sel_fg         = .*/color_sel_fg         = ${red} 100/g" \
		-e "s/color_sep_fg         = .*/color_sep_fg         = ${blue} 40/g"
		
	# zathura (courtesy of @GideonWolfe)
	"$gzathura" > "$zathura"
	
	## discord
	#if [[ -f "$discord" ]]; then 
	#sed -i "$discord" \
		#-e "s/--accent-color: .*/--accent-color: ${FG};/g" \
		#-e "s/--settings-icon-color: #.*/--settings-icon-color: ${FG};/g" \
		#-e "s/--background-1: .*/--background-1: ${bg_mix};/g" \
		#-e "s/--background-2: .*/--background-2: ${BG};/g" \
		#-e "s/--border-color: .*/--border-color: $bright_black;/g" \
		#-e "s/--background-modifier-hover: .*/--background-modifier-hover: ${magenta};/g" \
		#-e "s/--background-accent: .*/--background-accent: ${BG};/g" \
		#-e "s/--button-destructive: .*/--button-destructive: ${yellow};/g" \
		#-e "s/--button-background-hover: .*/--button-background-hover: ${red};/g" \
		#-e "s/--tab-selected: .*/--tab-selected: ${blue};/g" \
		#-e "s/--text-muted: .*/--text-muted: ${FG};/g"
	
	#fi
	# discord
	if [[ -f "$discord" ]]; then 
	sed -i "$discord" \
		-e "s/--text-normal: .*/--text-normal: ${FG};/g" \
		-e "s/--background-primary: .*/--background-primary: ${bg_mix};/g" \
		-e "s/--background-secondary: .*/--background-secondary: ${bg_light};/g" \
		-e "s/--background-secondary-alt: .*/--background-secondary-alt: ${bg_mix};/g" \
		-e "s/--background-tertiary: .*/--background-tertiary: ${bg_mix};/g" \
		-e "s/--background-mobile-primary: .*/--background-mobile-primary: ${bg_mix};/g" \
		-e "s/--background-mobile-secondary: .*/--background-mobile-secondary: ${bg_light};/g" \
		-e "s/--modal-background: .*/--modal-background: ${bg_light};/g" \
		-e "s/--activity-card-background: .*/--activity-card-background: ${bg_light};/g" \
		-e "s/--background-floating: .*/--background-floating: ${bg_light};/g" \
		-e "s/--background-accent: .*/--background-accent: ${red};/g" \
		-e "s/--unread-color: .*/--unread-color: ${cyan};/g" \
		-e "s/--input-background: .*/--input-background: ${bg_light};/g" \
		-e "s/ --channeltextarea-background: .*/ --channeltextarea-background: ${bg_light};/g" \
		-e "s/--user-buttons-color: .*/--user-buttons-color: ${white};/g"
	fi 

	# spotify
	# Spotify can be themed using the xrdb backend i.e. ${xrdb:color0:#222}
		
	# eww
	if [[ -f "$eww" ]]; then 
	[[ "$alpha" == "FF" ]] &&  sed -i "s/\$alpha: 0.3/\$alpha: 1.0/" "$eww" \
	|| sed -i "s/\$alpha: 1.0/\$alpha: 0.3/" "$eww" 
	sed -i 	"$eww" \
		-e "s/\$background: #.*/\$background: ${bg_light};/g" \
		-e "s/\$bg-alt: #.*/\$bg-alt: ${BG};/g" \
		-e "s/\$fg: #.*/\$fg: ${FG};/g" \
		-e "s/\$fg-alt: #.*/\$fg-alt: $white;/g" \
		-e "s/\$red: #.*/\$red: $bright_red;/g" \
		-e "s/\$green: #.*/\$green: $bright_green;/g" \
		-e "s/\$yellow: #.*/\$yellow: $bright_yellow;/g" \
		-e "s/\$blue: #.*/\$blue: $bright_blue;/g" \
		-e "s/\$purple: #.*/\$purple: $bright_magenta;/g" \
		-e "s/\$cyan: #.*/\$cyan: $bright_cyan;/g" \
		-e "s/\$gray: #.*/\$gray: $bright_black;/g" \
		-e "s/\$gray-alt: #.*/\$gray-alt: $bright_black;/g"
	fi
	
	# waybar
	if [[ -f "$waybar" ]]; then 
	cat > "$waybar" <<- EOF
	/*
	* Pywal Generated Palette
	*/
	
	@define-color foreground ${FG};
	@define-color background rgba(${bg_mix_rgb:4:-1},0.2);
	@define-color surface3 #394161;
	@define-color red $bright_red;
	@define-color green $bright_green;
	@define-color yellow $bright_yellow;
	@define-color blue $bright_blue;
	@define-color purple $bright_magenta;
	@define-color cyan $bright_cyan;

	EOF
	fi
	
	if [[ -f "$hypr" ]]; then 
	# hypr
	cat > "$hypr" <<- EOF 
		\$black		= ${bright_black:1}ff
		\$red 		= ${bright_red:1}ff
		\$green		= ${bright_green:1}ff
		\$yellow 	= ${bright_yellow:1}ff
		\$blue 		= ${bright_blue:1}ff
		\$magenta 	= ${bright_magenta:1}ff
		\$cyan 		= ${bright_cyan:1}ff
		\$white 	= ${bright_white:1}ff
		EOF
	fi
	
	# resize and move wallpaper for use by other programs
	#cp "$wallpaper"  "$HOME"/.config/wpg/templates/wallpaper.jpg
	ln -s "$wallpaper" "$HOME"/.config/wpg/wallpapers &> /dev/null
}

# change the wpg config file so this script can run whenever wpg is invoked 
wpgConfig(){
	sed -i "$HOME/.config/wpg/wpg.conf" \
		-e 's/execute_cmd = false/execute_cmd = true/g' \
		-e 's/reload = .*/reload = true/g' \
		-e 's/auto_adjust = false/auto_adjust = true/g' \
		-e "s/command = .*/command = \/home\/$(whoami)\/.local\/bin\/wpgtk main/g"
	
	version=$(python --version | grep -oE '[0-9]+\.[0-9]+')
	a=("polybar()" "reload.i3()")
	for i in "${a[@]}"; do
		line_number=$(grep -n "$i" "/usr/lib/python$version/site-packages/wpgtk/data/reload.py" | tail -n 1 | awk -F ':' '{print $1}')
		sudo sed -i "${line_number}s|^|#|" "/usr/lib/python$version/site-packages/wpgtk/data/reload.py"
	done
	
}

# this functions should only be used if you have a system with a seperate home partition 
# (this is bad)
lockPerms(){
	## give the user read and write permissions to the grub themes directory
	#if [[ -d "/usr/share/grub/themes/Arch" ]]; then
		#sudo chgrp -R $(whoami) /usr/share/grub/themes/
		#sudo chmod -R ug+rwX  /usr/share/grub/themes/
	#else 
		#echo "Can't find a compatible grub theme"
	#fi
	## give the user read and write permissions to the sddm directory
	if [[ -d "/usr/share/sddm/themes/Chili" ]]; then
		sudo chgrp -R "$(whoami)" /usr/share/sddm/
		sudo chmod -R ug+rwX  /usr/share/sddm/
	else
		echo "Can't find a compatible sddm theme"
	fi
}

# this funcction only works after using the lockPermissions function
copyWal(){
	# copy background to grub theme
	#if [[ -d "/usr/share/grub/themes/Arch" ]]; then
		#cp ~/.config/wpg/templates/wallpaper.jpg \
		#/usr/share/grub/themes/Arch/background.jpg
	#else 
		#echo "Can't find a compatible grub theme"
	#fi
	# copy background to sddm theme
	if [[ -d "/usr/share/sddm/themes/Chili" ]]; then
		cp "$wallpaper" "/usr/share/sddm/themes/Chili/components/artwork/background.jpg"
	else
		echo "Can't find a compatible sddm theme"
	fi
}

## Kill already running process
restart(){
	local cmd="$1"
    shift
	if [[ "$(pidof $cmd)" ]]; then
		killall "$cmd" && sleep 0.5
        "$cmd" "$@" & disown
	else 
        "$cmd" "$@" & disown
	fi
}
	
## Check if the command exists and then runs it
check(){
	local cmd="$1"
    shift
    if command -v "$cmd" >/dev/null 2>&1; then
        "$cmd" "$@" & disown
    else
        echo "Command not found: $cmd"
    fi
}

wall(){
	if [[ -z "$1" ]]; then
		echo "No image was selected"
		exit
	else 
		if [[ "$XDG_SESSION_TYPE" == "x11" ]]; then
			feh --no-fehbg --bg-fill "$1"
		elif [[ "$XDG_SESSION_TYPE" == "wayland" ]]; then
			"$HOME"/.config/hypr/scripts/wall "$1"
		fi
		
		wpg -A "$1" && wpg -s "$1"
		rm "$1""_wal_sample.png"
	fi
}

random(){
	if [[ "$(ls -A $Wallpapers)" ]]; then 
		image="$(find $Wallpapers -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" \) | shuf -n 1)"
		wall "$image"
	else
		notify-send -u low -r 43 "No Wallpapers Were Found in:" "~/Pictures/Wallpapers"
	fi
}

# this function uses implements a sxiv to create a wallpaper selector for wpg 
# to set a wallpaper you should select a wallpaper by pressing "m" and then quitting sxiv
pick(){
	if [[ "$(ls -A $Wallpapers)" ]]; then 
		wal=$(sxiv -torb $Wallpapers)
		wall "$wal"
	else
		notify-send -u low -r 43 "No Wallpapers Were Found In:" "~/Pictures/Wallpapers"
	fi
}	

dynamic(){
	dynmaic_wall="$HOME/Pictures/Dynamic"
	if [[ -d "$dynmaic_wall" ]]; then 
		ls "$dynmaic_wall"
		# get current hour
		if [[ ! -z "$1" ]]; then
			num=$(($(date +%k)/1))
			image="$dynmaic_wall/$1/$num"

			# get image format
			if [[ -f "${image}.png" ]]; then
				wall "$dynmaic_wall/$1/$num.png"
			elif [[ -f "${image}.jpg" ]]; then
				wall "$dynmaic_wall/$1/$num.jpg"
			fi	
		fi
	else
		echo "Dynamic Wallpapers Not Found!"
	fi
}
	
misc(){
	if [[ "$XDG_SESSION_TYPE" == "x11" ]]; then 
		"$HOME/.config/polybar/launch.sh" &> /dev/null &
		[[ "$XDG_CURRENT_DESKTOP" == "bspwm" ]] && "$HOME"/.config/bspwm/bsp-border &
		conky.sh restart
	elif [[ "$XDG_SESSION_TYPE" == "wayland" ]]; then
		"$HOME"/.config/waybar/launch_waybar
		gsettings set org.gnome.desktop.interface icon-theme 'Papirus1'
		gsettings set org.gnome.desktop.interface icon-theme 'Papirus'
		gsettings set org.gnome.desktop.interface gtk-theme 'FlatColor1'
		gsettings set org.gnome.desktop.interface gtk-theme 'FlatColor'
	fi
}

partial(){
	change_colors
	misc
	pkill dunst
	check spicetify -q update &
	check pywalfox update >/dev/null 2>&1 &
	check razer-cli -a &
}
main(){
	partial
	papirus-folder.sh --color ${red:1} &
	restart copyq --start-server &
	copyWal
	convert -scale 20% -blur 0x2 -resize \
	"$(xdpyinfo | awk '/dimensions/{print $2}')" \
	"$wallpaper" "$HOME/.config/wpg/templates/wallpaper.jpg"
	exit
}

## Check if wpg is installed and get colors
run(){
	if [[ -f "/usr/bin/wpg" ]]; then
		## check if the files exists and import colors from wpg
		if [[ -f "$HOME/.cache/wal/colors.sh" ]]; then
			source "$HOME/.cache/wal/colors.sh"
			# Normal colors
			BG="$(printf "%s\n" "$background")"
			FG="$(printf "%s\n" "$foreground")"
			black="$(printf "%s\n" "$color0")"
			red="$(printf "%s\n" "$color1")"
			green="$(printf "%s\n" "$color2")"
			yellow="$(printf "%s\n" "$color3")"
			blue="$(printf "%s\n" "$color4")"
			magenta="$(printf "%s\n" "$color5")"
			cyan="$(printf "%s\n" "$color6")"
			white="$(printf "%s\n" "$color7")"
			# Bright colors
			bright_black="$(printf "%s\n" "$color8")"
			bright_red="$(printf "%s\n" "$color9")"
			bright_green="$(printf "%s\n" "$color10")"
			bright_yellow="$(printf "%s\n" "$color11")"
			bright_blue="$(printf "%s\n" "$color12")"
			bright_magenta="$(printf "%s\n" "$color13")"
			bright_cyan="$(printf "%s\n" "$color14")"
			bright_white="$(printf "%s\n" "$color15")"
			# Additional colors
			bg_mix="$(pastel mix -f 0.4 $bright_black $black | pastel format hex)"
			bg_light="$(pastel mix -f 0.2 $bright_black $black | pastel format hex)"
			bg_dark="$(pastel darken 0.02 ${background:1} | pastel format hex)"
			bg_rgb="$(pastel format rgb ${background:1})"
			bg_mix_rgb="$(pastel format rgb ${bg_mix:1})"
			## merging the Xresources files with the main one
			xrdb -merge "$HOME"/.cache/wal/colors.Xresources
		else
			echo "[!] Theme file not found"
			exit 1
		fi 
	else
		echo "[!] 'wpgtk' is not installed."
		echo "Installing from the AUR..." 
		yay -S wpgtk-git --noconfirm
		wpgConfig
		# this command installs rofi, gtk, and openbox themes
		wpg-install.sh -g -o
	fi
}

"$@"
