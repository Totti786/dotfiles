#!/usr/bin/env bash

# Define cache and file paths
movies_directory="$HOME/Videos/Movies"
shows_directory="$HOME/Videos/Shows"
cached="$HOME/.cache/rofi-media"
shortcuts="$HOME/.local/share/applications/media"
fallback_poster="$cached/cover.jpg"  # Define the path to your fallback poster image

# Create necessary directories if they don't exist
mkdir -p "$shortcuts"
mkdir -p "$cached"

if [[ ! -f "$fallback_poster" ]]; then
    eval $(xrdb -query | awk '/color0/{print "color0="$NF} /color7/{print "color7="$NF}')
    magick -size 300x445 xc:"$color0" "$fallback_poster"
    magick "$fallback_poster" -gravity center -fill "$color7" \
    -font /usr/share/fonts/TTF/JetBrainsMonoNerdFont-Regular.ttf \
    -pointsize 90 -annotate 0 "ó°¿Ž" "$fallback_poster"
fi

get_poster(){
    # Replace 'YOUR_API_KEY' with your actual OMDB API key
    API_KEY="497fd34e"
    
    # Check if a movie title and directory path are provided as arguments
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "Usage: $0 <movie_title> <directory_path>"
        exit 1
    fi
    
    title="$1"
   
	# Check for a year in the title and store it in the year variable
	if [[ "$title" =~ ([1-2][0-9]{3}) ]]; then
		year="${BASH_REMATCH[1]}"
		title_without_year="${title//$year/}"
		#title_without_year="${title_without_year//[[:space:]]/}" # Remove any extra spaces
	else
		year=""
		title_without_year="$title"
	fi

	# Prepare the movie title argument for the API request
    encoded_title=$(echo "$title_without_year" | tr ' ' '+')
    
    # Fetch movie data from OMDB API
    response=$(curl -s "http://www.omdbapi.com/?t=$encoded_title&y=$year&type=movie&apikey=$API_KEY")
    
    # Check if the response contains an error message
    error_message=$(echo "$response" | jq -r '.Error')
    if [ "$error_message" != "null" ]; then
        echo "Error: $error_message"
        poster_url="N/A"
    else
        # Parse the JSON response using jq
        poster_url=$(echo "$response" | jq -r '.Poster')
    fi
    
    # Check if the poster URL is available
    if [ "$poster_url" == "N/A" ]; then
        echo "No poster available for '$title', using fallback image."
        cp "$fallback_poster" "$cached/$title.jpg"
    else
        # Extract the directory path provided as an argument
        directory_path="$2"
        
        # Check if the directory exists; if not, create it
        if [ ! -d "$directory_path" ]; then
            mkdir -p "$directory_path"
        fi
    
        # Use 'wget' to download the poster image
        wget -q "$poster_url" -O "$directory_path/$title.jpg"
        echo "Poster downloaded as '$directory_path/$title.jpg'"
    fi
}

movies(){
    readarray -t lines < <(find "$movies_directory" \( -type l -o -type f \) -name "*.mp4" -o -name "*.mkv")

    for line in "${lines[@]}"; do
        [[ -f "$line" ]] || continue
        
        name="${line##*/}"
        name="${name%.*}"

        # Fetch the poster using the name without the year
        if ! [[ -f "$cached/$name.jpg" ]]; then
            get_poster "$name" "$cached"
        fi

        movie="$shortcuts/$name.desktop"
        
        if [[ ! -f "$movie" ]]; then
            cat > "$movie" <<- EOF
            [Desktop Entry]
            Name=$name
            Exec=mpv '$line'
            Icon=$cached/$name.jpg
            Type=Application
            Categories=Movies;
            Comment=Year: $year
			EOF
        fi
    done

    rofi -show drun -drun-categories Movies -theme rofi-media
}


shows(){
    readarray -t lines < <(find "$shows_directory" \( -type l -o -type f \) -name "*.mp4" -o -name "*.mkv")

    for line in "${lines[@]}"; do
        [[ -f "$line" ]] && name="${line##*/}" name="${name%.*}"
        
        if ! [[ -f "$cached/$name.jpg" ]]; then
            get_show_poster "$name" "$cached"
        fi

        show="$shortcuts/$name.desktop"
        
        if [[ ! -f "$show" ]]; then
            cat > "$show" <<- EOF
            [Desktop Entry]
            Name=$name
            Exec=mpv '$line'
            Icon=$cached/$name.jpg
            Type=Application
            Categories=Shows;
			EOF
        fi
    done

    rofi -show drun -drun-categories Shows -theme rofi-media
}

if [[ "$(ls "$movies_directory" | grep -e "\.mp4$" -e "\.mkv$")" ]] ; then 
    [[ -z "$(ls -A $cached)" ]] && notify-send -a Rofi-Movies -t 2000 -r 40 "Rofi-Movies" "Getting Covers..."
    movies && rm -r "$shortcuts"
else
    notify-send -t 2000 -r 41 "Rofi-Movies" "No Movies Were Found"
fi
