#!/usr/bin/env bash

## Copyright (C) 2020-2022 Aditya Shakya <adi1090x@gmail.com>
## Everyone is permitted to copy and distribute copies of this file under GNU-GPL3

## jgmenu Pipemenu For Picom Compositor

# User's config dir
PICOM_DIR="$HOME/.config/picom/"

readonly EXECXCOMP='picom'
readonly RESTART_ATTEMPTS=20
readonly HELP='
compositor a jgmenu pipe menu for use with picom

Options (passed from the menu):
    -h --help   show this message
    --start     start the compositor
    --restart   restart the compositor, if running
    --stop      stop the compositor
    --edit      open the picom config file in a text editor
    --watch     restart picom when the config is modified (useful for debugging)

See ~/.config/picom.conf and "man picom" for configuration options.'

for i in "$@"; do
    case "$i" in
        -h|--help) echo "$HELP" ; exit 0
    esac
done

declareDependencies picom

##-- various checks ---------------------
check_backend=$(cat $PICOM_DIR/picom.conf | grep "backend = " | head -n1 | cut -d'=' -f2 | tr -d ';,[:blank:],"')
check_corners=$(cat $PICOM_DIR/picom.conf | grep 'corner-radius =' | cut -d'=' -f2 | tr -d ';,[:blank:]')
check_border=$(cat $PICOM_DIR/picom.conf | grep 'round-borders =' | cut -d'=' -f2 | tr -d ';,[:blank:]')
check_shadow=$(cat $PICOM_DIR/picom.conf | grep 'shadow =' | head -n1 | cut -d'=' -f2 | tr -d ';,[:blank:]')
check_fading=$(cat $PICOM_DIR/picom.conf | grep 'fading =' | head -n1 | cut -d'=' -f2 | tr -d ';,[:blank:]')
check_blur=$(cat $PICOM_DIR/picom.conf | grep 'method =' | head -n1 | cut -d'=' -f2 | tr -d ';,[:blank:],"')
check_animations=$(cat $PICOM_DIR/picom.conf | grep 'animations = ' | head -n1 | cut -d'=' -f2 | tr -d ';,[:blank:],"')
check_opacity=$(cat $PICOM_DIR/picom.conf | grep '^#.*opacity-rule')

## Kill picom
forcekill_picom() {
    killall -q picom
    for ((i=0; i<RESTART_ATTEMPTS; i++)); do
        [[ $(pidof picom) ]] || break
        killall -q -S KILL picom
        sleep 0.25
    done
}

##-- Edit config ---------------------
if [[ "$1" = '--edit' ]]; then # Edit picom settings
    if ! [ -e "$HOME/.config/picom/picom.conf" ]; then
        notify-send -a picom  -r 92 "picom warnning" "config file not found\!"
    fi
    if hash exo-open &>/dev/null; then
        exo-open "$HOME/.config/picom/picom.conf"
    else
        geany "$HOME/.config/picom/picom.conf"
    fi

elif [[ "$1" = '--start' ]]; then
    if ! [[ $(pidof picom) ]]; then
        $EXECXCOMP
    else
        echo "$0 --start: picom already running" && exit 1
    fi

elif [[ "$1" = '--stop' ]]; then
    forcekill_picom

elif [[ "$1" = '--restart' ]]; then
    if [[ $(pidof picom) ]]; then
        forcekill_picom
        "$0" --start
    else # nothing to restart
        echo "$0 --restart: picom is not running" && exit 1
    fi

elif [[ "$1" = '--watch' ]]; then
    while inotifywait -e close_write "$HOME/.config/picom/picom.conf"; do
        "$0" --restart
    done

##-- backend ------------------

elif [[ "$1" = '--use-glx' ]]; then
	sed -i -e "s/backend = .*/backend = \"glx\";/g" "$PICOM_DIR/picom.conf"

elif [[ "$1" = '--use-xrender' ]]; then
	sed -i -e "s/backend = .*/backend = \"xrender\";/g" "$PICOM_DIR/picom.conf"

##-- corners ---------------------

elif [[ "$1" = '--corner-radius' ]]; then
	cradius=$(zenity --text='Corner Radius' --scale --value=6 --min-value=0 --max-value=40)
	if [[ "$cradius" ]]; then
		sed -i -e "s/backend = .*/backend = \"glx\";/g" "$PICOM_DIR/picom.conf"
		sed -i -e "s/corner-radius = .*/corner-radius = $cradius;/g" "$PICOM_DIR/picom.conf"
    fi

elif [[ "$1" = '--disable-corners' ]]; then
    sed -i -e "s/corner-radius = .*/corner-radius = 0;/g" "$PICOM_DIR/picom.conf"

##-- borders ---------------------

elif [[ "$1" = '--border-size' ]]; then
	cborder=$(zenity --text='Border Size' --scale --value=4 --min-value=0 --max-value=100)
	if [[ "$cborder" ]]; then
		sed -i -e "s/round-borders = .*/round-borders = $cborder;/g" "$PICOM_DIR/picom.conf"
    fi

elif [[ "$1" = '--disable-borders' ]]; then
    sed -i -e "s/round-borders = .*/round-borders = 0;/g" "$PICOM_DIR/picom.conf"

##-- shadows ---------------------

elif [[ "$1" = '--update-shadows' ]]; then
	get_shadows=$(yad --borders=10 --width='350' --height='200' --title='Client Shadows' --button=Cancel:1 --button=Okay:0 --form --field="Radius:NUM" 14\!0..50\!1 --field="Opacity:NUM" 0.30\!0..1\!0.1\!2  --field="X-Offset:NUM" 12\!-30..30\!1 --field="Y-Offset:NUM" 12\!-30..30\!1)
	shadow_r=$(echo $get_shadows | cut -d'|' -f1)
	shadow_o=$(echo $get_shadows | cut -d'|' -f2)
	shadow_x=$(echo $get_shadows | cut -d'|' -f3)
	shadow_y=$(echo $get_shadows | cut -d'|' -f4)
	if [[ "$get_shadows" ]]; then
		sed -i -e "s/shadow-radius = .*/shadow-radius = $shadow_r;/g" "$PICOM_DIR/picom.conf"
		sed -i -e "s/shadow-opacity = .*/shadow-opacity = $shadow_o;/g"" $PICOM_DIR/picom.conf"
		sed -i -e "s/shadow-offset-x = .*/shadow-offset-x = $shadow_x;/g" "$PICOM_DIR/picom.conf"
		sed -i -e "s/shadow-offset-y = .*/shadow-offset-y = $shadow_y;/g" "$PICOM_DIR/picom.conf"
	fi

elif [[ "$1" = '--disable-shadows' ]]; then
    sed -i -e "s/shadow = .*/shadow = false;/g" "$PICOM_DIR/picom.conf"	

elif [[ "$1" = '--enable-shadows' ]]; then
    sed -i -e "s/shadow = .*/shadow = true;/g" "$PICOM_DIR/picom.conf"	

elif [[ "$1" = '--reset-shadows' ]]; then
	sed -i -e "s/shadow-radius = .*/shadow-radius = 15;/g" "$PICOM_DIR/picom.conf"
	sed -i -e "s/shadow-opacity = .*/shadow-opacity = 0.75;/g" "$PICOM_DIR/picom.conf"
	sed -i -e "s/shadow-offset-x = .*/shadow-offset-x = -15;/g" "$PICOM_DIR/picom.conf"
	sed -i -e "s/shadow-offset-y = .*/shadow-offset-y = -15;/g" "$PICOM_DIR/picom.conf"

##-- fading ---------------------

elif [[ "$1" = '--update-fading' ]]; then
	get_fading=$(yad --borders=10 --width='350' --height='160' --title='Fading' --button=Cancel:1 --button=Okay:0 --form --field="Fade-in-step:NUM" 0.03\!0.01..1\!0.01\!2 --field="Fade-out-step:NUM" 0.03\!0.01..1\!0.01\!2 --field="Fade-delta:NUM" 5\!0..10\!1)
	fading_in=$(echo $get_fading | cut -d'|' -f1)
	fading_out=$(echo $get_fading | cut -d'|' -f2)
	fading_delta=$(echo $get_fading | cut -d'|' -f3)
	if [[ "$get_fading" ]]; then
		sed -i -e "s/fade-in-step = .*/fade-in-step = $fading_in;/g" "$PICOM_DIR/picom.conf"
		sed -i -e "s/fade-out-step = .*/fade-out-step = $fading_out;/g" "$PICOM_DIR/picom.conf"
		sed -i -e "s/fade-delta = .*/fade-delta = $fading_delta;/g" "$PICOM_DIR/picom.conf"
	fi

elif [[ "$1" = '--disable-fading' ]]; then
    sed -i -e "s/fading = .*/fading = false;/g" "$PICOM_DIR/picom.conf"

elif [[ "$1" = '--enable-fading' ]]; then
    sed -i -e "s/fading = .*/fading = true;/g" "$PICOM_DIR/picom.conf"	

elif [[ "$1" = '--reset-fading' ]]; then
	sed -i -e "s/fade-in-step = .*/fade-in-step = 0.03;/g" "$PICOM_DIR/picom.conf"
	sed -i -e "s/fade-out-step = .*/fade-out-step = 0.03;/g" "$PICOM_DIR/picom.conf"
	sed -i -e "s/fade-delta = .*/fade-delta = 5;/g" "$PICOM_DIR/picom.conf"

##-- blur ---------------------

elif [[ "$1" = '--enable-blur' ]]; then
	sed -i -e "s/backend = .*/backend = \"glx\";/g" "$PICOM_DIR/picom.conf"
	sed -i -e "s/method = .*/method = \"dual_kawase\";/g" "$PICOM_DIR/picom.conf"
	sed -i -e "s/strength = .*/strength = 7;/g" "$PICOM_DIR/picom.conf"

elif [[ "$1" = '--disable-blur' ]]; then
	sed -i -e "s/method = .*/method = \"none\";/g" "$PICOM_DIR/picom.conf"
	sed -i -e "s/strength = .*/strength = 0;/g" "$PICOM_DIR/picom.conf"

elif [[ "$1" = '--enable-opacity' ]]; then
	[[ -n "$(grep '^#.*opacity-rule' "$PICOM_DIR/picom.conf")" ]] &&
		sed -i "/opacity-rule = \[/,/\];/ s/^#//" "$PICOM_DIR/picom.conf"
		sed -i "s/opacity=1.0/opacity=0.9/g" "$PICOM_DIR/picom.conf"
		
elif [[ "$1" = '--disable-opacity' ]]; then
	[[ -z "$(grep '^#.*opacity-rule' "$PICOM_DIR/picom.conf")" ]] &&
		sed -i "/opacity-rule = \[/,/\];/ s/^/#/" "$PICOM_DIR/picom.conf"
		sed -i "s/opacity=0.9/opacity=1.0/g" "$PICOM_DIR/picom.conf"

elif [[ "$1" = '--update-blur' ]]; then
	bstrength=$(zenity --text='Blur Strength' --scale --value=4 --min-value=1 --max-value=20)
	if [[ "$bstrength" ]]; then
		sed -i -e "s/strength = .*/strength = $bstrength;/g" "$PICOM_DIR/picom.conf"
	fi

##-- animations ---------------

elif [[ "$1" = '--enable-animations' ]]; then
	sed -i -e "s/animations = .*/animations = true;/g" "$PICOM_DIR/picom.conf"
	
elif [[ "$1" = '--disable-animations' ]]; then
	sed -i -e "s/animations =.*/animations = false;/g" "$PICOM_DIR/picom.conf"

##-- menu ---------------------

else
    if ! [[ $(pidof picom) ]]; then
        menu+=("Enable Compositor,$0 --start")
    else
        menu+=("^sep(Backend)")
		if [[ "$check_backend" != "glx" ]]; then
			menu+=("Use 'glx' backend" "$0 --use-glx")
		else
			menu+=("Use 'xrender' backend,$0 --use-xrender")
		fi
        menu+=("^sep(Corners)")
		if [[ "$check_corners" != "0" ]]; then
			menu+=("Change Corner Radius,$0 --corner-radius")
			menu+=("Disable Rounded Corners,$0 --disable-corners")
		else
			menu+=("Enable Rounded Corners,$0 --corner-radius")
		fi
        menu+=("^sep(Border)")
		if [[ "$check_border" != "0" ]]; then
			menu+=("Change Border Size,$0 --border-size")
			menu+=("Disable Borders,$0 --disable-borders")
		else
			menu+=("Enable Borders,$0 --border-size")
		fi
        menu+=("^sep(Shadow)")
		if [[ "$check_shadow" == "true" ]]; then
			menu+=("Modify Shadow Settings,$0 --update-shadows")
			menu+=("Reset Shadow Settings,$0 --reset-shadows")
			menu+=("Disable Client Shadows,$0 --disable-shadows")
		else
			menu+=("Enable Client Shadows,$0 --enable-shadows")
		fi
        menu+=("^sep(Fading)")
		if [[ "$check_fading" == "true" ]]; then
			menu+=("Modify Fading Settings,$0 --update-fading")
			menu+=("Reset Fading Settings,$0 --reset-fading")
			menu+=("Disable Fading,$0 --disable-fading")
		else
			menu+=("Enable Fading,$0 --enable-fading")
		fi
        menu+=("^sep(Blur)")
		if [[ "$check_blur" != "dual_kawase" ]]; then
			menu+=("Enable Blur Effect,$0 --enable-blur")
		else
			menu+=("Set Blur Strength,$0 --update-blur")
			menu+=("Disable Blur Effect,$0 --disable-blur")
		fi
		if [[ "$check_opacity" ]]; then 
			menu+=("Enable Opcaity,$0 --enable-opacity")
		else
			menu+=("Disable Opacity,$0 --disable-opacity")
		fi
		menu+=("^sep(Animations)")
		if [[ "$check_animations" == "true" ]]; then 
			menu+=("Disable Animations,$0 --disable-animations")
		else 
			menu+=("Enable Animations,$0 --enable-animations")
		fi
        menu+=("^sep(Settings)")
        menu+=("Restart Compositor,$0 --restart")
        menu+=("Disable Compositor,$0 --stop")
    fi
	menu+=("^sep()")
    menu+=("Edit Configuration File,$0 --edit")
    
   	printf '%s\n' "${menu[@]}"
fi

exit 0
